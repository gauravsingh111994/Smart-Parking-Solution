function varargout = MainGUI(varargin)
% MAINGUI M-file for MainGUI.fig
%      MAINGUI, by itself, creates a new MAINGUI or raises the existing
%      singleton*.
%
%      H = MAINGUI returns the handle to a new MAINGUI or the handle to
%      the existing singleton*.
%
%      MAINGUI('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in MAINGUI.M with the given input arguments.
%
%      MAINGUI('Property','Value',...) creates a new MAINGUI or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before MainGUI_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to MainGUI_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help MainGUI

% Last Modified by GUIDE v2.5 21-Oct-2016 03:10:37

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @MainGUI_OpeningFcn, ...
                   'gui_OutputFcn',  @MainGUI_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT

% --- Executes just before MainGUI is made visible.
function MainGUI_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to MainGUI (see VARARGIN)

% Choose default command line output for MainGUI
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% This sets up the initial plot - only do when we are invisible
% so window can get raised using MainGUI.
if strcmp(get(hObject,'Visible'),'off')
 
end

% UIWAIT makes MainGUI wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = MainGUI_OutputFcn(hObject, eventdata, handles)
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes on selection change in popupmenu1.
function popupmenu1_Callback(hObject, eventdata, handles)
% hObject    handle to popupmenu1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = get(hObject,'String') returns popupmenu1 contents as cell array
%        contents{get(hObject,'Value')} returns selected item from popupmenu1


% --- Executes during object creation, after setting all properties.
function popupmenu1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to popupmenu1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
     set(hObject,'BackgroundColor','white');
end

set(hObject, 'String', {'Camera1', 'Camera2'});


% --- Executes on selection change in popupmenu1.
function popupmenu1_Callback(hObject, eventdata, handles)
% hObject    handle to popupmenu1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = get(hObject,'String') returns popupmenu1 contents as cell array
%        contents{get(hObject,'Value')} returns selected item from popupmenu1


% --- Executes on button press in pushbutton1.
function pushbutton1_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
axes(handles.axes1);
cla;

popup_sel_index = get(handles.popupmenu1, 'Value');
switch popup_sel_index
    case 1
        try
        vid = videoinput('winvideo',1,'RGB24_320x240');
        handles.vid=vid;
        vidRes = get(handles.vid, 'VideoResolution');
        nBands = get(handles.vid, 'NumberOfBands');
        hImage = image( zeros(vidRes(2), vidRes(1), nBands) );
        preview(handles.vid, hImage)
        catch E
            msgbox({'Configure The Cam Correctly!',' ',E.message},'CAM INFO')
        end
        guidata(hObject, handles);
        %total=10;occupied=6;vacant=4;
        %set(handles.text1, 'String','Total                 :');
        %set(handles.text2, 'String','Occupied         :');
        %set(handles.text3, 'String','vacant               :');
        %set(handles.text4, 'String',num2str(total));
        %set(handles.text5, 'String',num2str(occupied));
        %set(handles.text6, 'String',num2str(vacant));
        
        while 1
        testpic = getsnapshot(vid);
        imwrite(testpic,'image1.jpg','jpg');                
        end
                 
    case 2
        try
        vid = videoinput('winvideo',1,'RGB24_640x480');
        handles.vid=vid;
        vidRes = get(handles.vid, 'VideoResolution');
        nBands = get(handles.vid, 'NumberOfBands');
        hImage = image( zeros(vidRes(2), vidRes(1), nBands) );
        preview(handles.vid, hImage)
        catch E
            msgbox({'Configure The Cam Correctly!',' ',E.message},'CAM INFO')
        end
        guidata(hObject, handles);
        
        while 1
        testpic = getsnapshot(vid);
        imwrite(testpic,'image1.jpg','jpg');                
        end
end


% --- Executes on button press in pushbutton2.
function pushbutton2_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
axes(handles.axes1);
cla;

popup_sel_index = get(handles.popupmenu1, 'Value');
switch popup_sel_index
    case 1
        try
        %%
        vid = videoinput('winvideo',1,'RGB24_640x480');
        handles.vid=vid;
        vidRes = get(handles.vid, 'VideoResolution');
        nBands = get(handles.vid, 'NumberOfBands');
        hImage = image( zeros(vidRes(2), vidRes(1), nBands) );
        
        setappdata(hImage,'UpdatePreviewWindowFcn',@mypreview_fcn);
        setappdata(hImage,'HandleToTimestampLabel',hTextLabel);
	preview(handles.vid, hImage)
        
        catch E
            msgbox({'Configure The Cam Correctly!',' ',E.message},'CAM INFO')
        end
                         
    case 2
        try
        %%
        catch E
            msgbox({'Configure The Cam Correctly!',' ',E.message},'CAM INFO')
        end

end


% --- Executes on button press in pushbutton3.
function pushbutton3_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in pushbutton4.
function pushbutton4_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton4 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


function mypreview_fcn(obj,event,himage)
% Example update preview window function.

% Get timestamp for frame.
tstampstr = event.Timestamp;

% Get handle to text label uicontrol.
ht = getappdata(himage,'HandleToTimestampLabel');

% Set the value of the text label.
set(ht,'String',tstampstr);

% Display image data.
set(himage, 'CData', event.Data)

%gaussian filter
hsize = 80;
sigma = 20;
gaus_filt = fspecial('gaussian',hsize , sigma);
SE = strel('diamond', 0); %this makes a matrice object for passing into imdilate())

    bck_image = imread("camera1_bck_img.jpeg") ;
    img_tmp = double(himage); %load image and convert to double for computation 
    img = img_tmp(:,:,1); %reduce to just the first dimension
           
    %subtract background from the image
    sub_img = (img - bck_img);
    
    %gaussian blurr the image
    gaus_img = filter2(gaus_filt,sub_img,'same');     
    
    %threshold the image
    thres_img = (gaus_img < 10);
    thres_img = ~thres_img;
    thres_img = bwareaopen(thres_img,10);
    thres_img = ~thres_img;
    se2 = strel('disk',1);        
    thres_img = imerode(thres_img,se2);
    
    %counting no of blobs
    thres_img = ~thres_img;
    [L, num] = bwlabel(thres_img);
    stats = regionprops(L, 'Centroid');
    thres_img = ~thres_img;
    
    %highlight occupied with red circle
    himage = thres_img;
    
    %set the status panel    
    set(handles.text1, 'String','Total                 :');
    set(handles.text2, 'String','Occupied         :');
    set(handles.text3, 'String','vacant               :');
    set(handles.text4, 'String',num2str(tps));
    set(handles.text5, 'String',num2str(num));
    set(handles.text6, 'String',num2str(tps-num));





